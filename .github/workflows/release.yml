name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Library version (ex. 0.1.0)"
        required: true
      node_version:
        description: "Node.js version (ex. 19.6.0)"
        required: true

env:
  NODEHOST_VERSION: ${{ github.event.inputs.version }}
  NODEHOST_NODE_VERSION: ${{ github.event.inputs.node_version }}
  NODEHOST_CONFIGURATION: release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-11, windows-2019, ubuntu-20.04]
        architecture: [x86, x64]
        exclude:
          - os: macos-11
            architecture: x86
          - os: ubuntu-20.04
            architecture: x86
    runs-on: ${{ matrix.os }}
    env:
      NODEHOST_ARCHITECTURE: ${{ matrix.architecture }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install nasm (windows)
        run: choco install -y nasm
        if: runner.os == 'Windows'

      - name: Install ninja (macos)
        run: HOMEBREW_NO_AUTO_UPDATE=1 brew install ninja
        if: runner.os == 'macOS'

      - name: Install ninja (linux)
        run: sudo apt-get install -y ninja-build
        if: runner.os == 'Linux'

      - name: Try restore built node from cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: ./libs/node
          key: ${{ runner.os }}-${{ env.NODEHOST_NODE_VERSION }}-${{ env.NODEHOST_ARCHITECTURE }}-${{ env.NODEHOST_CONFIGURATION }}

      - name: Build node
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./scripts/01-build-node.ps1
        shell: pwsh

      - name: Save built node to cache
        uses: actions/cache/save@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ./libs/node
          key: ${{ runner.os }}-${{ env.NODEHOST_NODE_VERSION }}-${{ env.NODEHOST_ARCHITECTURE }}-${{ env.NODEHOST_CONFIGURATION }}

      - name: Build nodehost
        run: ./scripts/02-build-nodehost.ps1
        shell: pwsh

      - name: Publish
        id: publish
        run: ./scripts/03-publish.ps1
        shell: pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.publish.outputs.zipname }}
          path: artifacts/${{ steps.publish.outputs.zipname }}

  gh_release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: "*.zip"
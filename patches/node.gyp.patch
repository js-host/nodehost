diff --git a/node.gyp b/node.gyp
index b0f132e..070cd61 100644
--- a/node.gyp
+++ b/node.gyp
@@ -894,6 +894,116 @@
         },
       ],
     }, # node_lib_target_name
+    { # nodehost
+      'target_name': 'libnodehost',
+      'type': 'shared_library',
+      'dependencies': [
+        '<(node_lib_target_name)',
+      ],
+      'includes': [
+        'node.gypi'
+      ],
+      'include_dirs': [
+        'src',
+        'src-nodehost',
+      ],
+      'defines': [
+        'NODE_ARCH="<(target_arch)"',
+        'NODE_PLATFORM="<(OS)"',
+        'NODE_WANT_INTERNALS=1',
+        'NODEHOST_COMPILING=1'
+      ],
+      'msvs_settings': {
+        'VCCLCompilerTool': {
+          'ExceptionHandling': 1, # /EHsc
+        },
+      },
+      'sources': [
+        'src/node_snapshot_stub.cc',
+        '../../src/nodehost/api/node_context.cpp',
+        '../../src/nodehost/api/node_instance.cpp',
+        '../../src/nodehost/api/node_process.cpp',
+        '../../src/nodehost/api/node_script.cpp',
+        '../../src/nodehost/api/node_value.cpp',
+        '../../src/nodehost/libnodehost.cpp',
+        # headers to make for a more pleasant IDE experience
+        '../../src/nodehost/api/node_configuration.h',
+        '../../src/nodehost/api/node_context.h',
+        '../../src/nodehost/api/node_error.h',
+        '../../src/nodehost/api/node_instance.h',
+        '../../src/nodehost/api/node_process.h',
+        '../../src/nodehost/api/node_script.h',
+        '../../src/nodehost/api/node_value.h',
+        '../../src/nodehost/internal/utils.h',
+        '../../src/nodehost/config.h',
+        '../../src/nodehost/libnodehost.h',
+      ],
+      'conditions': [
+        [ 'node_intermediate_lib_type=="static_library" and node_shared=="false"', {
+          'xcode_settings': {
+            'OTHER_LDFLAGS': [
+              '-Wl,-force_load,<(PRODUCT_DIR)/<(STATIC_LIB_PREFIX)<(node_core_target_name)<(STATIC_LIB_SUFFIX)',
+              '-Wl,-force_load,<(PRODUCT_DIR)/<(STATIC_LIB_PREFIX)v8_base_without_compiler<(STATIC_LIB_SUFFIX)',
+            ],
+          },
+          'msvs_settings': {
+            'VCLinkerTool': {
+              'AdditionalOptions': [
+                '/WHOLEARCHIVE:<(node_lib_target_name)<(STATIC_LIB_SUFFIX)',
+                '/WHOLEARCHIVE:<(STATIC_LIB_PREFIX)v8_base_without_compiler<(STATIC_LIB_SUFFIX)',
+              ],
+            },
+          },
+          'conditions': [
+            ['OS != "aix" and OS != "mac" and OS != "ios"', {
+              'ldflags': [
+                '-Wl,--whole-archive',
+                '<(obj_dir)/<(STATIC_LIB_PREFIX)<(node_core_target_name)<(STATIC_LIB_SUFFIX)',
+                '<(obj_dir)/tools/v8_gypfiles/<(STATIC_LIB_PREFIX)v8_base_without_compiler<(STATIC_LIB_SUFFIX)',
+                '-Wl,--no-whole-archive',
+              ],
+            }],
+            [ 'OS=="win"', {
+              'sources': [ 'src/res/node.rc' ],
+            }],
+          ],
+        }],
+        ['OS=="win"', {
+          'libraries': [
+            'Dbghelp.lib',
+            'winmm.lib',
+            'Ws2_32.lib',
+          ],
+        }],
+      ]
+    }, # nodehost
+    { # nodehostsample
+      'target_name': 'nodehostsample',
+      'type': 'executable',
+      'includes': [
+        'common.gypi',
+      ],
+      'dependencies': [
+        'libnodehost',
+      ],
+      'include_dirs': [
+        '../../src/nodehostsample',
+      ],
+      'defines': [
+        'NODE_ARCH="<(target_arch)"',
+        'NODE_PLATFORM="<(OS)"',
+      ],
+      'msvs_settings': {
+        'VCCLCompilerTool': {
+          'ExceptionHandling': 1, # /EHsc
+        },
+      },
+      'sources': [
+        '../../src/nodehostsample/nodehostsample.cpp',
+        # headers to make for a more pleasant IDE experience
+        '../../src/nodehostsample/nodehostsample.h',
+      ]
+    }, # nodehostsample
     { # fuzz_url
       'target_name': 'fuzz_url',
       'type': 'executable',
